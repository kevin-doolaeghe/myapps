services:
  server:
    image: ghcr.io/goauthentik/server:2024.12.1
    user: "${DOCKER_PUID:-0}:${DOCKER_PGID:-0}"
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: /run/secrets/password
      AUTHENTIK_REDIS__HOST: authentik_cache
      AUTHENTIK_POSTGRESQL__HOST: authentik_database
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRESQL_DATABASE:-authentik}
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_POSTGRESQL_USERNAME:-admin}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRESQL_PASSWORD:-admin}
    secrets:
      - password
    networks:
      - network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.authentik.rule=Host(`authentik.${TRAEFIK_DOMAIN_NAME:?error}`)"
        - "traefik.http.services.authentik.loadbalancer.server.port=9000"
  worker:
    image: ghcr.io/goauthentik/server:2024.12.1
    user: "${DOCKER_PUID:-0}:${DOCKER_PGID:-0}"
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: /run/secrets/password
      AUTHENTIK_REDIS__HOST: authentik_cache
      AUTHENTIK_POSTGRESQL__HOST: authentik_database
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRESQL_DATABASE:-authentik}
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_POSTGRESQL_USERNAME:-admin}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRESQL_PASSWORD:-admin}
    secrets:
      - password
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
  database:
    image: postgres:16-alpine
    user: "${DOCKER_PUID:-0}:${DOCKER_PGID:-0}"
    volumes:
      - data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${AUTHENTIK_POSTGRESQL_DATABASE:-authentik}
      POSTGRES_USER: ${AUTHENTIK_POSTGRESQL_USERNAME:-admin}
      POSTGRES_PASSWORD: ${AUTHENTIK_POSTGRESQL_PASSWORD:-admin}
    networks:
      - network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
  cache:
    image: redis:alpine
    user: "${DOCKER_PUID:-0}:${DOCKER_PGID:-0}"
    command:
      - "--save 60 1"
      - "--loglevel warning"
    networks:
      - network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

secrets:
  password:
    external: true

volumes:
  data:
    name: authentik_data

networks:
  network:
    name: ${DOCKER_NETWORK:?error}
    external: true
